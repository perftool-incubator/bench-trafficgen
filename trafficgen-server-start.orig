#!/bin/bash
exec >trafficgen-server-start-stderrout.txt 
exec 2>&1

. /usr/bin/trafficgen-base || (echo "/usr/bin/trafficgen-base not found"; exit 1)

dump_runtime
validate_label

# Defaults
sample_dir=`/bin/pwd`
switch_type="testpmd"
devices=""
testpmd_forward_mode="mac"
testpmd_queues="1"
testpmd_queues_per_pmd="1"
testpmd_descriptors="2048"
testpmd_smt_mode="grouped"
testpmd_smt="on"
testpmd_mtu="1518"
testpmd_enable_scatter="off"
testpmd_enable_rx_cksum="off"
testpmd_enable_rss_udp="off"
testpmd_devopt=""
testpmd_mbuf_size=""
testpmd_burst=""

# Options processing
re='^(--[^=]+)=([^=]+)'
while [ $# -gt 0 ]; do
    if [[ "$1" =~ $re ]]; then
        arg="${BASH_REMATCH[1]}"
        val="${BASH_REMATCH[2]}"
        shift
    else
        arg="$1"
        shift
        val="$1"
        shift
    fi
    case "$arg" in
        --switch-type)
            switch_type="$val" # Can be "testpmd" or "null"
            ;;
        # The following two are needed to determine DPDK device IDs (0,1,2...)
        --devices)
            devices="$val"
            ;;
        --testpmd-forward-mode)
            testpmd_forward_mode="$val"
            ;;
        --testpmd-queues)
            testpmd_queues="$val"
            ;;
        --testpmd-queues-per-pmd)
            testpmd_queues_per_pmd="$val"
            ;;
        --testpmd-descriptors)
            testpmd_descriptors="$val"
            ;;
        --testpmd-smt-mode)
            testpmd_smt_mode="$val"
            ;;
        --testpmd-smt)
            testpmd_smt="$val"
            ;;
        --testpmd-mtu)
            testpmd_mtu="$val"
            ;;
        --testpmd-devopt)
            testpmd_devopt="$val"
            ;;
        --testpmd-enable-scatter)
            testpmd_enable_scatter="$val"
            ;;
        --testpmd-enable-rx-cksum)
            testpmd_enable_rx_cksum="$val"
            ;;
        --testpmd-enable-rss-udp)
            testpmd_enable_rss_udp="$val"
            ;;
        --testpmd-mbuf-size)
            testpmd_mbuf_size="$val"
            ;;
        --testpmd-burst)
            testpmd_burst="$val"
            ;;
    esac
done

if [ "$switch_type" == "testpmd" ]; then
    if [ -z "$devices" ]; then
        exit_error "Value for --server-devices was not found, exiting" 1 "$sample_dir"
    fi

    # trafficgen-server may receive a message about MACs from the traffic-generator
    echo "These files exist in ./msgs/rx:"
    /bin/ls -l msgs/rx
    file="msgs/rx/infra-start-end:1"
    if [ -e "$file" ]; then
        echo "Found $file:"
        cat $file
        peermac0=`jq -r '.macs[0]' $file`
        if [ ! -z "$peermac0" ]; then
            echo "Found eth-peer MAC0 $peermac0"
        fi
        peermac1=`jq -r '.macs[1]' $file`
        if [ ! -z "$peermac1" ]; then
            echo "Found eth-peer MAC1 $peermac1"
        fi
    fi

    # Build testpmd cmdline opts for device selection
    echo "Resolving devices for testpmd based on devices [$devices]"
    testpmd_devices=""
    dev_1=$(echo "${devices}" | cut -d, -f 1)
    dev_2=$(echo "${devices}" | cut -d, -f 2)
    dev_3=$(echo "${devices}" | cut -d, -f 3-)
    if [ -n "${dev_3}" ]; then
        exit_error "Testpmd requires exactly 2 devices (not '${devices}'), exiting" 1 "$sample_dir"
    fi
    res_dev_1=""
    resolve_device res_dev_1 "${dev_1}"
    res_dev_2=""
    resolve_device res_dev_2 "${dev_2}"
    testpmd_devices+=" --allow ${res_dev_1}"
    if [ -n "${testpmd_devopt}" ]; then
        testpmd_devices+=",${testpmd_devopt}"
    fi
    testpmd_devices+=" --allow ${res_dev_2}"
    if [ -n "${testpmd_devopt}" ]; then
        testpmd_devices+=",${testpmd_devopt}"
    fi
    if [ -z "${testpmd_devices}" ]; then
        exit_error "Testpmd devices could not be found, exiting" 1 "$sample_dir"
    fi
    res_dev_1_numa_node=$(cat "/sys/bus/pci/devices/${res_dev_1}/numa_node")
    res_dev_2_numa_node=$(cat "/sys/bus/pci/devices/${res_dev_2}/numa_node")
    echo "Device 1: ${res_dev_1}"
    echo "Device 1 NUMA node: ${res_dev_1_numa_node}"
    echo "Device 2: ${res_dev_2}"
    echo "Device 2 NUMA node: ${res_dev_2_numa_node}"

    if [ "${res_dev_1_numa_node}" == "-1" ]; then
        res_dev_1_numa_node="0"
    fi

    if [ "${res_dev_2_numa_node}" == "-1" ]; then
        res_dev_2_numa_node="0"
    fi

    # figure out the CPUs to use
    if [ -z "${HK_CPUS}" ] ; then
        exit_error "There are no housekeeping CPUs to use for testpmd" 1 "$sample_dir"
    else
        echo "HK_CPUS=${HK_CPUS}"
    fi
    HK_CPUS_SEPARATED=$(echo "${HK_CPUS}" | sed -e "s/,/ /g")
    HK_CPUS_ARRAY=(${HK_CPUS_SEPARATED})
    if [ ${#HK_CPUS_ARRAY[@]} -lt 1 ]; then
        exit_error "You must have at least 1 HK_CPUS" 1 "$sample_dir"
    fi

    if [ -z "${WORKLOAD_CPUS}" ]; then
        exit_error "There are no dedicated/isolated CPUs to use for testpmd" 1 "$sample_dir"
    else
        echo "WORKLOAD_CPUS=${WORKLOAD_CPUS}"
    fi
    WORKLOAD_CPUS_SEPARATED=$(echo "${WORKLOAD_CPUS}" | sed -e "s/,/ /g")

    cpu_str=""
    for cpu in $WORKLOAD_CPUS_SEPARATED; do
        cpu_str+=" --cpu $cpu"
    done
    if [ "${res_dev_1_numa_node}" == "${res_dev_2_numa_node}" ]; then
        cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt ${testpmd_smt} --smt-enumeration ${testpmd_smt_mode} --numa-node ${res_dev_1_numa_node} ${cpu_str}"
        echo "about to run: ${cmd}"
        CMD_OUTPUT=$(${cmd})
        echo -e "${CMD_OUTPUT}"
        WORKLOAD_CPUS_SEPARATED=$(echo -e "${CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }' | sed -e "s/,/ /g")
    else
        if [ "${testpmd_smt}" == "on" ]; then
            exit_error "The usage of SMT is not supported when the PCI devices are located on different NUMA nodes, exiting" 1 "${sample_dir}"
        fi

        echo "Determining node local CPUs for each device:"

        echo "Device 1:"
        dev_1_cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt off --numa-node ${res_dev_1_numa_node} ${cpu_str}"
        echo "about to run: ${dev_1_cmd}"
        DEV_1_CMD_OUTPUT=$(${cmd})
        echo -e "${DEV_1_CMD_OUTPUT}"
        DEV_1_WORKLOAD_CPUS_SEPARATED=$(echo -e "${DEV_1_CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }' | sed -e "s/,/ /g")
        DEV_1_WORKLOAD_CPUS_ARRAY=(${DEV_1_WORKLOAD_CPUS_SEPARATED})

        echo "Device 2:"
        dev_2_cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt off --numa-node ${res_dev_2_numa_node} ${cpu_str}"
        echo "about to run: ${dev_2_cmd}"
        DEV_2_CMD_OUTPUT=$(${cmd})
        echo -e "${DEV_2_CMD_OUTPUT}"
        DEV_2_WORKLOAD_CPUS_SEPARATED=$(echo -e "${DEV_2_CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }' | sed -e "s/,/ /g")
        DEV_2_WORKLOAD_CPUS_ARRAY=(${DEV_2_WORKLOAD_CPUS_SEPARATED})

        echo "Creating combined CPU list (should be alternating CPUs from each device -- per testpmd device/queue assignment):"
        dev_1_counter=0
        dev_1_end=0
        dev_2_counter=0
        dev_2_end=0
        WORKLOAD_CPUS_SEPARATED=""
        while [ ${dev_1_end} == 0 -o ${dev_2_end} == 0 ]; do
            if [ ${dev_1_end} == 0 -a ${dev_1_counter} -lt ${#DEV_1_WORKLOAD_CPUS_ARRAY[@]} ]; then
                cpu="${DEV_1_WORKLOAD_CPUS_ARRAY[${dev_1_counter}]}"
                echo "Adding cpu ${cpu} from device 1"
                WORKLOAD_CPUS_SEPARATED+=" ${cpu}"

                (( dev_1_counter += 1 ))

                if [ ${dev_1_counter} -ge ${#DEV_1_WORKLOAD_CPUS_ARRAY[@]} ]; then
                    echo "Reached end of device 1 cpu list"
                    dev_1_end=1
                fi
            fi

            if [ ${dev_2_end} == 0 -a ${dev_2_counter} -lt ${#DEV_2_WORKLOAD_CPUS_ARRAY[@]} ]; then
                cpu="${DEV_2_WORKLOAD_CPUS_ARRAY[${dev_2_counter}]}"
                echo "Adding cpu ${cpu} from device 2"
                WORKLOAD_CPUS_SEPARATED+=" ${cpu}"

                (( dev_2_counter += 1 ))

                if [ ${dev_2_counter} -ge ${#DEV_2_WORKLOAD_CPUS_ARRAY[@]} ]; then
                    echo "Reached end of device 2 cpu list"
                    dev_2_end=1
                fi
            fi
        done
        echo "WORKLOAD_CPUS_SEPARATED=${WORKLOAD_CPUS_SEPARATED}"
    fi

    echo "Trimming CPU list to match required length:"
    # Number of Ports * Queues per Device
    WORKLOAD_CPUS_REQUIRED=$(( 2*${testpmd_queues}/${testpmd_queues_per_pmd} ))
    echo "WORKLOAD_CPUS_REQUIRED=${WORKLOAD_CPUS_REQUIRED}"
    tmp_list="${WORKLOAD_CPUS_SEPARATED}"
    WORKLOAD_CPUS_SEPARATED=""
    cpu_idx=0
    for cpu in ${tmp_list}; do
        echo "adding cpu: ${cpu}"
        WORKLOAD_CPUS_SEPARATED+=" ${cpu}"

        (( cpu_idx += 1 ))
        if [ ${cpu_idx} -eq ${WORKLOAD_CPUS_REQUIRED} ]; then
            break
        fi
    done
    if [ ${cpu_idx} -lt ${WORKLOAD_CPUS_REQUIRED}  ]; then
	exit_error "Not enough CPUs to fullfill testpmd device queue requirements, exiting" 1 "${sample_dir}"
    fi
    echo "WORKLOAD_CPUS_SEPARATED=${WORKLOAD_CPUS_SEPARATED}"
    WORKLOAD_CPUS_ARRAY=(${WORKLOAD_CPUS_SEPARATED})

    testpmd_cores=${#WORKLOAD_CPUS_ARRAY[@]}
    testpmd_cpus=""
    cpu_idx=0
    for cpu in $(echo "${HK_CPUS_ARRAY[0]} ${WORKLOAD_CPUS_SEPARATED}" | sed -e "s/\s+/ /g" -e "s/^\s//" -e "s/\s$//"); do
        testpmd_cpus+="${cpu_idx}@${cpu},"
        (( cpu_idx++ ))
    done
    testpmd_cpus=$(echo "${testpmd_cpus}" | sed -e "s/,$//")

    # autodetect what the testpmd numa memory configuration should be
    if pushd /sys/devices/system/node > /dev/null; then
        testpmd_mem=""

        for node in $(ls -1d node*); do
            NODE_NUM=$(echo ${node} | sed -e "s/node//")
            if pushd $node > /dev/null; then
                NODE_CPU_PRESENT=0

                for cpu in ${WORKLOAD_CPUS_SEPARATED}; do
                    if [ -d "cpu${cpu}" ]; then
                        NODE_CPU_PRESENT=1
                        break
                    fi
                done

                if [ "${NODE_CPU_PRESENT}" == "1" ]; then
                    testpmd_mem+="1024,"
                else
                    testpmd_mem+="0,"
                fi

                popd > /dev/null
            fi
        done

        testpmd_mem=$(echo "${testpmd_mem}" | sed -e "s/,$//")

        popd > /dev/null
    fi

    testpmd_output="trafficgen-testpmd-stderrout.txt"
    testpmd_bin=$( command -v dpdk-testpmd || command -v testpmd )
    testpmd_opts=" --lcores ${testpmd_cpus}"
    testpmd_opts+=" --file-prefix ${cs_label}"
    testpmd_opts+=" --socket-mem ${testpmd_mem}"
    testpmd_opts+=" --huge-dir /dev/hugepages ${testpmd_devices}"
    testpmd_opts+=" -v"
    testpmd_opts+=" --"
    testpmd_opts+=" --nb-ports 2 --nb-cores ${testpmd_cores} --auto-start --stats-period=5"
    testpmd_opts+=" --rxq ${testpmd_queues} --txq ${testpmd_queues}"
    testpmd_opts+=" --rxd ${testpmd_descriptors} --txd ${testpmd_descriptors}"
    testpmd_opts+=" --max-pkt-len=${testpmd_mtu}"
    testpmd_opts+=" --record-core-cycles"
    testpmd_opts+=" --record-burst-stats"
    if [ "$testpmd_enable_scatter" == "on" ]; then
        testpmd_opts+=" --enable-scatter"
    elif [ "$testpmd_enable_scatter" == "off" ]; then
        echo "--enable-scatter will not be used"
    else
        exit_error "value for --testpmd-enable-scatter ($testpmd_enable_scatter) is not valid.  Use either 'on' or 'off'"
    fi

    if [ "$testpmd_enable_rx_cksum" == "on" ]; then
        testpmd_opts+=" --enable-rx-cksum"
    elif [ "$testpmd_enable_rx_cksum" == "off" ]; then
        echo "--enable-rx-cksum will not be used"
    else
        exit_error "value for --testpmd-enable-rx-cksum ($testpmd_enable_rx_cksum) is not valid.  Use either 'on' or 'off'"
    fi

    if [ "$testpmd_enable_rss_udp" == "on" ]; then
        testpmd_opts+=" --rss-udp"
    elif [ "$testpmd_enable_rss_udp" == "off" ]; then
        echo "--enable-rss-udp will not be used"
    else
        exit_error "value for --testpmd-enable-rss-udp ($testpmd_enable_rss_udp) is not valid.  Use either 'on' or 'off'"
    fi

    if [ ! -z "$testpmd_burst" ]; then
        testpmd_opts+=" --burst=$testpmd_burst"
    fi

    # Bump up the default mbuf if the MTU is large,
    # but allow a user-defined mbuf size to not be changed
    if [ "${testpmd_mtu}" -gt 2048 -a -z "$testpmd_mbuf_size" ]; then
        testpmd_mbuf_size=16384
        testpmd_opts+=" --mbuf-size=${testpmd_mbuf_size}"
    fi

    if [ ! -z "$testpmd_mbufs" ]; then
        testpmd_opts+=" --total-num-mbufs=${testpmd_mbufs}"
    fi

    if [ "$testpmd_forward_mode" == "mac" ]; then
        # TODO: use regex instead:
        if [ -z "$peermac0" -o -z "$peermac1" ]; then
            exit_error  "[ERROR] Using forware-mode = mac, but did not get MAC addresses from TREX" 1 "$sample_dir"
        fi
        testpmd_opts+=" --eth-peer 0,$peermac0 --eth-peer 1,$peermac1 --forward-mode mac"
    else
        testpmd_opts+=" "
    fi

    echo "Going to run: $testpmd_bin $testpmd_opts"
    ( ${testpmd_bin} ${testpmd_opts} 2>&1 & echo $! > trafficgen-server.pid ) | ${TOOLBOX_HOME}/bin/timestamper.py > ${testpmd_output} &
    sleep 5 # TODO: need a better wait
    mac0=`egrep "Port 0: [A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}" $testpmd_output | awk -F"0: " '{print $2}'`
    mac1=`egrep "Port 1: [A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}" $testpmd_output | awk -F"1: " '{print $2}'`
    echo "MAC0: $mac0"
    echo "MAC1: $mac1"
    # TODO: fail if MACs are not found in testpmd output
    if [ "$testpmd_forward_mode" == "mac" ]; then
        # MAC info, to be sent to endpoint and then forwarded to the client
        echo '{"recipient":{"type":"all","id":"all"},"user-object":{"macs":["'$mac0'","'$mac1'"]}}' >msgs/tx/svc
    fi
elif [ "$switch_type" == "null" ]; then
    echo "Using switch_type null, no setup required"
else
    exit_error "Invalid switch type used: $switch_type"
fi
